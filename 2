while ($true) {
    Write-Host "`nSelect an option:"
    Write-Host "1. Append .log files to DailyLog.txt (B1)"
    Write-Host "2. List all files in tabular format (C916contents.txt) (B2)"
    Write-Host "3. Show current CPU and memory usage (B3)"
    Write-Host "4. List running processes sorted by virtual size (B4)"
    Write-Host "5. Exit (B5)"
    
    $choice = Read-Host "Enter your choice"
    
    switch ($choice) {
        "1" {
            # B1: Prepend .log files to DailyLog.txt (newest at the top)
            $logPath = "C:\source\requirements1\DailyLog.txt"
            
            if (!(Test-Path $logPath)) {
                Write-Host "‚ùå Error: $logPath does not exist. Please make sure the file is created before running this option."
                continue
            }
            
            # Get current contents of DailyLog.txt and prepend new entries
            $existingContent = Get-Content -Path $logPath

            $newContent = @"
--------------------------------------
$(Get-Date -Format "dddd, MMMM dd, yyyy hh:mm tt")
File Path: $logPath
Mode, Last Write Time, Length, Name
"@

            # Append the .log files list
            $newContent += (Get-ChildItem -Path "C:\source\requirements1" -Filter "*.log" | 
                            Select-Object Mode, LastWriteTime, Length, Name | 
                            Format-Table -AutoSize | Out-String)

            # Write new content to the top of DailyLog.txt
            $newContent + $existingContent | Set-Content -Path $logPath

            Write-Host "‚úÖ Log files prepended to DailyLog.txt."
        }
        "2" {
            # B2: List all files in tabular format and save to C916contents.txt
            $contentsPath = "C:\source\requirements1\C916contents.txt"

            if (!(Test-Path "C:\source\requirements1")) {
                Write-Host "‚ùå Error: The directory C:\source\requirements1 does not exist."
                continue
            }

            Get-ChildItem -Path "C:\source\requirements1" | 
                Sort-Object Name | 
                Format-Table -AutoSize | 
                Out-File -FilePath $contentsPath

            Write-Host "‚úÖ File listing saved to C916contents.txt."
        }
        "3" {
            # B3: Show CPU and memory usage
            Read-Host "Press Enter to check system usage..."
            $cpuUsage = Get-Counter -Counter "\Processor(_Total)\% Processor Time" -SampleInterval 2 -MaxSamples 3
            $memoryUsage = Get-Counter -Counter "\Memory\% Committed Bytes In Use" -SampleInterval 2 -MaxSamples 3
            
            $results = for ($i = 0; $i -lt 3; $i++) {
                [PSCustomObject]@{
                    Timestamp    = $cpuUsage.CounterSamples[$i].Timestamp
                    CPU_Usage    = [math]::round($cpuUsage.CounterSamples[$i].CookedValue, 2)
                    Memory_Usage = [math]::round($memoryUsage.CounterSamples[$i].CookedValue, 2)
                }
            }

            $results | Format-Table -AutoSize
            Write-Host "üì∏ Please take a screenshot and save it in Requirements1."
        }
        "4" {
            # B4: List running processes sorted by virtual memory size
            Get-Process | Sort-Object -Property VM | 
                Select-Object Id, ProcessName, @{Name="VM (MB)";Expression={[math]::round($_.VM / 1MB, 2)}} | 
                Out-GridView

            Write-Host "üì∏ Running processes displayed in grid format. Screenshot and save in Requirements1."
        }
        "5" {
            # B5: Exit script
            Write-Host "üëã Exiting script."
            exit
        }
        default {
            Write-Host "‚ö† Invalid choice. Please try again."
        }
    }
}
